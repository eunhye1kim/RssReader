{
  "name": "ejdb",
  "version": "1.1.25",
  "config": {
    "windownloadurl_ia32": "http://dl.dropboxusercontent.com/u/4709222/ejdb/tcejdb-1.1.25-mingw32-i686.zip",
    "windownloadurl_x64": "http://dl.dropboxusercontent.com/u/4709222/ejdb/tcejdb-1.1.25-mingw32-x86_64.zip"
  },
  "main": "ejdb.js",
  "homepage": "http://ejdb.org",
  "description": "EJDB - Embedded JSON Database engine",
  "keywords": [
    "ejdb",
    "tokyocabinet",
    "nosql",
    "database",
    "storage",
    "embedded",
    "mongodb",
    "cli",
    "json"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Softmotions/ejdb-node.git"
  },
  "bugs": {
    "url": "https://github.com/Softmotions/ejdb-node/issues"
  },
  "os": [
    "linux",
    "darwin",
    "sunos",
    "win32"
  ],
  "engines": {
    "node": "0.8.x || 0.10.x"
  },
  "dependencies": {
    "nodeunit": ">=0.7.0"
  },
  "scripts": {
    "preinstall": "node platform.js preinstall",
    "test": "node platform.js test"
  },
  "bin": {
    "ejdb": "bin/cli.js"
  },
  "author": {
    "name": "Anton Adamansky",
    "email": "adamansky@gmail.com"
  },
  "licenses": [
    {
      "type": "LGPL",
      "url": "https://github.com/Softmotions/ejdb/blob/master/LICENSE"
    }
  ],
  "contributors": [],
  "readme": "EJDB NodeJS\n================================================\n\nInstallation\n--------------------------------\n**System libraries:**\n\n* g++\n* zlib\n\nOn Debian/Ubuntu linux you can install it as follows:\n\n```sh\nsudo apt-get install g++ zlib1g zlib1g-dev\n```\n\n**Installation from node package manager on linux/macos:**\n\n    npm install ejdb\n\n**[Installing EJDB NodeJS module on windows](#windows-ejdb-node-module-installation)**\n\n\nEJDB NodeJS samples\n---------------------------------\n\n* [node/samples](https://github.com/Softmotions/ejdb-node/samples)\n* [node/tests](https://github.com/Softmotions/ejdb-node/tests)\n* [nwk-ejdb-address-book](https://github.com/Softmotions/nwk-ejdb-address-book)\n\n\nEJDB NodeJS API\n----------------------------------\n\n<a name=\"open\" />\n### EJDB.open(dbFile, openMode)\n\nOpen database. Return database instance handle object.\n<br/>Default open mode: `JBOWRITER | JBOCREAT`.\n<br/>This is blocking function.\n\n__Arguments__\n\n * {String} dbFile Database main file name\n * {Number} `[openMode=JBOWRITER | JBOCREAT]` Bitmast of open modes:\n       - `JBOREADER` Open as a reader.\n       - `JBOWRITER` Open as a writer.\n       - `JBOCREAT` Create if db file not exists\n       - `JBOTRUNC` Truncate db.\n\n---------------------------------------\n\n<a name=\"close\" />\n### close()\n\nClose database.\n<br/>If database was not opened it does nothing.\n<br/>This is blocking function.\n\n---------------------------------------\n\n<a name=\"isOpen\"/>\n### isOpen()\nCheck if database in opened state.\n\n---------------------------------------\n\n<a name=\"ensureCollection\"/>\n### ensureCollection(cname, copts)\n\nAutomatically creates new collection if it does't exists.\nCollection options `copts` applied only for newly created collection.\nFor existing collections `copts` takes no effect.\n\nCollection options (copts):\n\n * cachedrecords : Max number of cached records in shared memory segment. Default: 0\n * records : Estimated number of records in this collection. Default: 65535.\n * large : Specifies that the size of the database can be larger than 2GB. Default: false\n * compressed : If true collection records will be compressed with DEFLATE compression. Default: false.\n\n<br/>This is blocking function.\n\n__Arguments__\n\n * {String} cname Name of collection.\n * {Object} `[copts]` Collection options.\n\n---------------------------------------\n\n\n<a name=\"dropCollection\"/>\n### dropCollection(cname, prune, cb)\n\nDrop collection.\n\nCall variations:\n\n    dropCollection(cname)\n    dropCollection(cname, cb)\n    dropCollection(cname, prune, cb)\n\n__Arguments__\n\n * {String} cname Name of collection.\n * {Boolean} `[prune=false]` If true the collection data will erased from disk.\n * {Function} `[cb]` Callback args: (error)\n\n---------------------------------------\n\n<a name=\"save\"/>\n### save(cname, jsarr, cb)\n\nSave/update specified JSON objects in the collection.\nIf collection with `cname` does not exists it will be created.\n\nEach persistent object has unique identifier (OID) placed in the `_id` property.\nIf a saved object does not have  `_id` it will be autogenerated.\nTo identify and update object it should contains `_id` property.\n\nIf callback is not provided this function will be synchronous.\n\nCall variations:\n\n    save(cname, <json object>|<Array of json objects>, [options] [cb])\n    save(cname, <json object>|<Array of json objects>, [cb])\n\nNOTE: Field names of passed JSON objects may not contain `$` and `.` characters,\n      error condition will be fired in this case.\n\n__Arguments__\n\n * {String} **cname** Name of collection.\n * {Array|Object} jsarr Signle JSON object or array of JSON objects to save\n * {Function} `[cb]` Callback args: (error, {Array} of OIDs for saved objects)\n\n__Return__\n\n * {Array} of OIDs of saved objects in synchronous mode otherwise returns {undefined}.\n\n--------------------------------------\n\n<a name=\"load\"/>\n### load(cname, oid, cb)\n\nLoads JSON object identified by OID from the collection.\nIf callback is not provided this function will be synchronous.\n\n__Arguments__\n\n * {String} cname Name of collection\n * {String} oid Object identifier (OID)\n * {Function} cb  Callback args: (error, obj)\n        `obj`:  Retrieved JSON object or NULL if it is not found.\n\n__Return__\n\n * JSON object or {null} if it is not found in synchronous mode otherwise return {undefined}.\n\n--------------------------------------\n\n<a name=\"remove\"/>\n### remove(cname, oid, cb)\n\nRemoves JSON object from the collection.\nIf callback is not provided this function will be synchronous.\n\n__Arguments__\n\n * {String} cname Name of collection\n * {String} oid Object identifier (OID)\n * {Function} cb  Callback args: (error)\n\n\n--------------------------------------\n\n<a name=\"find\"/>\n### find(cname, qobj, orarr, hints, cb)\nExecute query on collection.\nEJDB queries inspired by MongoDB (mongodb.org) and follows same philosophy.\n\n    Supported queries:\n      - Simple matching of String OR Number OR Array value:\n          -   {'fpath' : 'val', ...}\n      - $not Negate operation.\n          -   {'fpath' : {'$not' : val}} //Field not equal to val\n          -   {'fpath' : {'$not' : {'$begin' : prefix}}} //Field not begins with val\n      - $begin String starts with prefix\n          -   {'fpath' : {'$begin' : prefix}}\n      - $gt, $gte (>, >=) and $lt, $lte for number types:\n          -   {'fpath' : {'$gt' : number}, ...}\n      - $bt Between for number types:\n          -   {'fpath' : {'$bt' : [num1, num2]}}\n      - $in String OR Number OR Array val matches to value in specified array:\n          -   {'fpath' : {'$in' : [val1, val2, val3]}}\n      - $nin - Not IN\n      - $strand String tokens OR String array val matches all tokens in specified array:\n          -   {'fpath' : {'$strand' : [val1, val2, val3]}}\n      - $stror String tokens OR String array val matches any token in specified array:\n          -   {'fpath' : {'$stror' : [val1, val2, val3]}}\n      - $exists Field existence matching:\n          -   {'fpath' : {'$exists' : true|false}}\n      - $icase Case insensitive string matching:\n          -  {'fpath' : {'$icase' : 'val1'}} //icase matching\n          Ignore case matching with '$in' operation:\n          -  {'name' : {'$icase' : {'$in' : ['tHéâtre - театр', 'heLLo WorlD']}}}\n          For case insensitive matching you can create special type of string index.\n      - $elemMatch The $elemMatch operator matches more than one component within an array element.\n          -  { array: { $elemMatch: { value1 : 1, value2 : { $gt: 1 } } } }\n          Restriction: only one $elemMatch allowed in context of one array field.\n      - $and, $or joining:\n          -   {..., $and : [subq1, subq2, ...] }\n          -   {..., $or  : [subq1, subq2, ...] }\n          Example: {z : 33, $and : [ {$or : [{a : 1}, {b : 2}]}, {$or : [{c : 5}, {d : 7}]} ] }\n\n\t  - Mongodb $(projection) operator supported. (http://docs.mongodb.org/manual/reference/projection/positional/#proj._S_)\n\t  - Mongodb positional $ update operator supported. (http://docs.mongodb.org/manual/reference/operator/positional/)\n\n      - Queries can be used to update records:\n\n        $set Field set operation.\n            - {.., '$set' : {'field1' : val1, 'fieldN' : valN}}\n        $upsert Atomic upsert. If matching records are found it will be '$set' operation,\n                otherwise new record will be inserted with fields specified by argment object.\n           - {.., '$upsert' : {'field1' : val1, 'fieldN' : valN}}\n        $inc Increment operation. Only number types are supported.\n            - {.., '$inc' : {'field1' : number, ...,  'field1' : number}\n        $dropall In-place record removal operation.\n            - {.., '$dropall' : true}\n        $addToSet Atomically adds value to the array only if its not in the array already.\n                    If containing array is missing it will be created.\n            - {.., '$addToSet' : {'fpath' : val1, 'fpathN' : valN, ...}}\n        $addToSetAll Batch version if $addToSet\n            - {.., '$addToSetAll' : {'fpath' : [array of values to add], ...}}\n        $pull Atomically removes all occurrences of value from field, if field is an array.\n            - {.., '$pull' : {'fpath' : val1, 'fpathN' : valN, ...}}\n        $pullAll Batch version of $pull\n            - {.., '$pullAll' : {'fpath' : [array of values to remove], ...}}\n\n    NOTE: It is better to execute update queries with `$onlycount=true` hint flag\n         or use the special `update()` method to avoid unnecessarily rows fetching.\n\n    NOTE: Negate operations: $not and $nin not using indexes\n          so they can be slow in comparison to other matching operations.\n\n    NOTE: Only one index can be used in search query operation.\n\n    NOTE: If callback is not provided this function will be synchronous.\n\n    QUERY HINTS (specified by `hints` argument):\n      - $max Maximum number in the result set\n      - $skip Number of skipped results in the result set\n      - $orderby Sorting order of query fields.\n      - $onlycount true|false If `true` only count of matching records will be returned\n                              without placing records in result set.\n      - $fields Set subset of fetched fields\n           If a field presented in $orderby clause it will be forced to include in resulting records.\n           Example:\n           hints:    {\n                       \"$orderby\" : { //ORDER BY field1 ASC, field2 DESC\n                           \"field1\" : 1,\n                           \"field2\" : -1\n                       },\n                       \"$fields\" : { //SELECT ONLY {_id, field1, field2}\n                           \"field1\" : 1,\n                           \"field2\" : 1\n                       }\n                     }\n\n    Many C API query examples can be found in `tcejdb/testejdb/t2.c` test case.\n\n    To traverse selected records cursor object is used:\n      - Cursor#next() Move cursor to the next record and returns true if next record exists.\n      - Cursor#hasNext() Returns true if cursor can be placed to the next record.\n      - Cursor#field(name) Retrieve value of the specified field of the current JSON object record.\n      - Cursor#object() Retrieve whole JSON object with all fields.\n      - Cursor#reset() Reset cursor to its initial state.\n      - Cursor#length Read-only property: Number of records placed into cursor.\n      - Cursor#pos Read/Write property: You can set cursor position: 0 <= pos < length\n      - Cursor#close() Closes cursor and free cursor resources. Cursor cant be used in closed state.\n\n    Call variations of find():\n       - find(cname, [cb])\n       - find(cname, qobj, [cb])\n       - find(cname, qobj, hints, [cb])\n       - find(cname, qobj, qobjarr, [cb])\n       - find(cname, qobj, qobjarr, hints, [cb])\n\n __Arguments__\n\n * {String} cname Name of collection\n * {Object} qobj Main JSON query object\n * {Array} `[orarr]` Array of additional OR query objects (joined with OR predicate).\n * {Object} `[hints]` JSON object with query hints.\n * {Function} cb Callback args: (error, cursor, count)\n            `cursor`: Cursor object to traverse records\n      qobj      `count`:  Total number of selected records\n\n__Return__\n\n * If callback is provided returns {undefined}\n * If no callback and `$onlycount` hint is set returns count {Number}.\n * If no callback and no `$onlycount` hint returns cursor {Object}.\n\n --------------------------------------------\n\n<a name=\"findOne\"/>\n### findOne(cname, qobj, orarr, hints, cb)\nSame as #find() but retrieves only one matching JSON object.\n\nCall variations of findOne():\n\n    findOne(cname, [cb])\n    findOne(cname, qobj, [cb])\n    findOne(cname, qobj, hints, [cb])\n    findOne(cname, qobj, qobjarr, [cb])\n    findOne(cname, qobj, qobjarr, hints, [cb])\n\n__Arguments__\n\n * {String} cname Name of collection\n * {Object} qobj Main JSON query object\n * {Array} `[orarr]` Array of additional OR query objects (joined with OR predicate).\n * {Object} `[hints]` JSON object with query hints.\n * {Function} cb Callback args: (error, obj)\n             `obj`  Retrieved JSON object or NULL if it is not found.\n\n__Return__\n\n * If callback is provided returns {undefined}\n * If no callback is provided returns found {Object} or {null}\n\n-----------------------------------\n<a name=\"findOne\"/>\n### update(cname, qobj, orarr, hints, cb)\nConvenient method to execute update queries.\n\n * `$set` Field set operation:\n    - {some fields for selection, '$set' : {'field1' : {obj}, ...,  'field1' : {obj}}}\n * `$upsert` Atomic upsert. If matching records are found it will be '$set' operation,\n otherwise new record will be inserted with fields specified by argment object.\n    - {.., '$upsert' : {'field1' : val1, 'fieldN' : valN}}\n * `$inc` Increment operation. Only number types are supported.\n    - {some fields for selection, '$inc' : {'field1' : number, ...,  'field1' : {number}}\n * `$dropall` In-place record removal operation.\n    - {some fields for selection, '$dropall' : true}\n * `$addToSet` | `$addToSetAll` Atomically adds value to the array only if its not in the array already.\n If containing array is missing it will be created.\n    - {.., '$addToSet' : {'fpath' : val1, 'fpathN' : valN, ...}}\n * `$pull` | `pullAll` Atomically removes all occurrences of value from field, if field is an array.\n    - {.., '$pull' : {'fpath' : val1, 'fpathN' : valN, ...}}\n\nCall variations of update():\n\n    update(cname, [cb])\n    update(cname, qobj, [cb])\n    update(cname, qobj, hints, [cb])\n    update(cname, qobj, qobjarr, [cb])\n    update(cname, qobj, qobjarr, hints, [cb])\n\n__Arguments__\n\n * {String} cname Name of collection\n * {Object} qobj Update JSON query object\n * {Array} `[orarr]` Array of additional OR query objects (joined with OR predicate).\n * {Object} `[hints]` JSON object with query hints.\n * {Function} cb Callback args: (error, count)\n             `count`  The number of updated records.\n\n__Return__\n\n * If callback is provided returns {undefined}.\n * If no callback is provided returns {Number} of updated objects.\n\n\n-----------------------------------\n\n<a name=\"count\"/>\n### count(cname, qobj, orarr, hints, cb)\nConvenient count(*) operation.\n\nCall variations of count():\n\n    count(cname, [cb])\n    count(cname, qobj, [cb])\n    count(cname, qobj, hints, [cb])\n    count(cname, qobj, qobjarr, [cb])\n    count(cname, qobj, qobjarr, hints, [cb])\n\n__Arguments__\n\n * {String} cname Name of collection\n * {Object} qobj Main JSON query object\n * {Array} `[orarr]` Array of additional OR query objects (joined with OR predicate).\n * {Object} `[hints]` JSON object with query hints.\n * {Function} cb Callback args: (error, count)\n              `count`:  Number of matching records.\n\n__Return__\n\n * If callback is provided returns {undefined}.\n * If no callback is provided returns {Number} of matched object.\n\n-----------------------------------\n\n<a name=\"sync\"/>\n### sync(cb)\nSynchronize entire EJDB database with disk.\n\n__Arguments__\n\n * {Function} cb Callback args: (error)\n\n-----------------------------------\n\n<a name=\"dropIndexes\"/>\n### dropIndexes(cname, path, cb)\nDrop indexes of all types for JSON field path.\n\n__Arguments__\n\n * {String} cname Name of collection\n * {String} path  JSON field path\n * {Function} `[cb]` Optional callback function. Callback args: (error)\n\n------------------------------------\n\n<a name=\"optimizeIndexes\"/>\n### optimizeIndexes(cname, path, cb)\nOptimize indexes of all types for JSON field path.\nPerforms B+ tree index file optimization.\n\n __Arguments__\n\n  * {String} cname Name of collection\n  * {String} path  JSON field path\n  * {Function} `[cb]` Optional callback function. Callback args: (error)\n\n-----------------------------------\n\n<a name=\"ensureIndex\"/>\n### ensureStringIndex(cname, path, cb)\n### ensureIStringIndex(cname, path, cb)\n### ensureNumberIndex(cname, path, cb)\n### ensureArrayIndex(cname, path, cb)\n\nEnsure index presence of String|Number|Array type for JSON field path.\n`IString` is the special type of String index for case insensitive matching.\n\n __Arguments__\n\n  * {String} cname Name of collection\n  * {String} path  JSON field path\n  * {Function} `[cb]` Optional callback function. Callback args: (error)\n\n-----------------------------------\n\n<a name=\"rebuildIndex\"/>\n### rebuildStringIndex(cname, path, cb)\n### rebuildIStringIndex(cname, path, cb)\n### rebuildNumberIndex(cname, path, cb)\n### rebuildArrayIndex(cname, path, cb)\n\nRebuild index of String|Number|Array type for JSON field path.\n`IString` is the special type of String index for case insensitive matching.\n\n __Arguments__\n\n  * {String} cname Name of collection\n  * {String} path  JSON field path\n  * {Function} `[cb]` Optional callback function. Callback args: (error)\n\n-----------------------------------\n\n<a name=\"dropIndex\"/>\n### dropStringIndex(cname, path, cb)\n### dropIStringIndex(cname, path, cb)\n### dropNumberIndex(cname, path, cb)\n### dropArrayIndex(cname, path, cb)\n\nDrop index of String|Number|Array type for JSON field path.\n`IString` is the special type of String index for case insensitive matching.\n\n __Arguments__\n\n  * {String} cname Name of collection\n  * {String} path  JSON field path\n  * {Function} `[cb]` Optional callback function. Callback args: (error)\n\n-----------------------------------\n\nWindows EJDB Node module installation\n==================================\n\nTo install nodejs ejdb binding you need:\n\n * MSVC 2010 express edition\n * Installed node v0.8.x or v0.10.x\n * Manually installed `npm install adm-zip` package  (because it needed during installation process)\n\n Then start MSVC cmd window and run:\n\n    npm install ejdb\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "ejdb@1.1.25",
  "_from": "ejdb@"
}
